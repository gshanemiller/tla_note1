#!/usr/bin/python

import math
from itertools import chain, combinations, permutations

generator = [1,2,3,4,5,6,7,8,9,10,11,12]

def powerset(iterable):
	s = list(iterable)
	return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

sets = []
for result in powerset(generator):
	sets.append(result)

print("The set {0} has {1} elements in its powerset".format(generator, len(sets)))

totalCallSeq = 0
for s in sets:
	# for p in permutations(s):
	#	totalCallSeq = totalCallSeq + 1
	# the number of permutations of N elements take N is
	# computed directy by N!
	totalCallSeq = totalCallSeq + math.factorial(len(s))

print("There are {0} total call sequences".format(totalCallSeq))
